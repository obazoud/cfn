{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Creates single or dual NAT instances using ENI and Autoscaling for HA",

  "Parameters" : {
    "Prefix" : {
      "Default" : "",
      "Description" : "The prefix for the names of all created resources. If one is not specified then one will not be used.",
      "Type" : "String",
      "MaxLength" : "64"
    },

  "InstanceType" : {
    "Default" : "t2.micro",
    "Description" : "The instance type for the NatGw",
    "Type" : "String",
    "AllowedValues" : [ "t2.micro","t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium","m3.large","m3.xlarge","m3.2xlarge" ]
    },

   "VpcId" : {
      "Description" : "The VPC which the security groups will belong",
      "Type" : "AWS::EC2::VPC::Id"
    },

    "NatStrategy" : {
      "Default" : "single",
      "Description" : "Determines if a single NatGW will be used for both private subnets or each private subnet will het it's own NatGW using  dual NatGws.",
      "Type" : "String",
      "AllowedValues" : [ "single","dual" ],
      "ConstraintDescription" : "Must be either single, for 1 NatGw, or dual, for 2 NatGws."
    },

    "PublicSubnetIds" : {
      "Description" : "a list of one or  two public subnets depending on the NAT strategy",
      "Type" : "List<AWS::EC2::Subnet::Id>"
    },

    "NatSubnetIds" : {
      "Description" : "a list of the two private subnets",
      "Type" : "List<AWS::EC2::Subnet::Id>"
    },

    "KeyName" : {
      "Default" : "",
      "Description" : "Name of an SSH keypair which will be used for network related instances, such as NatGws and VpnGws. If one is not specified then the instances will be launched without one (i.e. No SSH access).",
      "Type" : "String",
      "MaxLength" : "255"
    },

    "LogGroupName" : {
      "Default" : "NatGw",
      "Description" : "name of the log group that will be used by the CloudWatch log agents installed on the NatGws. If one is not specified then one named NatGw will be created.",
      "Type" : "String",
      "MaxLength" : "512"
    }
  },


  "Mappings" : { 
    "NatGwImageId" : {
      "ap-northeast-1" :   { "ImageId" : "ami-03cf3903" } ,
      "ap-southeast-1" :   { "ImageId" : "ami-b49dace6" } ,
      "ap-southeast-2" :   { "ImageId" : "ami-e7ee9edd" } ,
      "eu-central-1" :     { "ImageId" : "ami-46073a5b" } ,
      "eu-west-1" :        { "ImageId" : "ami-6975eb1e" } ,
      "sa-east-1" :        { "ImageId" : "ami-fbfa41e6" } ,
      "us-east-1" :        { "ImageId" : "ami-303b1458" } ,
      "us-west-1" :        { "ImageId" : "ami-7da94839" } ,
      "us-west-2" :        { "ImageId" : "ami-69ae8259" } 
    }
  },

  "Conditions" : {
    "DualNatGws" : { "Fn::Equals" : [ { "Ref" : "NatStrategy" }, "dual" ] },
    "UseSSHKey" : { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "KeyName" }, "" ] } ] }
  },

  "Resources" : {
    "EipNatGw1" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },

    "EipNatGw2" : {
      "Type" : "AWS::EC2::EIP",
      "Condition" : "DualNatGws",
      "Properties" : {
        "Domain" : "vpc"
      }
    },
    
    "NetworkInterfaceNatGw1" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "Attached to NAT GW Instance to provide consistant instance for routing",
        "SourceDestCheck" : false,
        "SubnetId" : { "Fn::Select" : [ "0" , { "Ref" : "PublicSubnetIds" } ] },
        "Tags" : [ { "Key" : "Name",
                     "Value" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "NetworkInterfaceNatGw1" ] ] }
                     }
                 ]
        }
    },

    "NetworkInterfaceNatGw2" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Condition" : "DualNatGws",
      "Properties" : {
        "Description" : "Attached to NAT GW Instance to provide consistant instance for routing",
        "SourceDestCheck" : false,
        "SubnetId" : { "Fn::Select" : [ "1" , { "Ref" : "PublicSubnetIds" } ] },
        "Tags" : [ { "Key" : "Name",
                     "Value" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "NetworkInterfaceNatGw2" ] ] }
                     }
                 ]
        }
    },


    "EIPAssociationEipNatGw1toNetworkInterfaceNatGw1" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "EipNatGw1", "AllocationId" ] },
        "NetworkInterfaceId" : { "Ref" : "NetworkInterfaceNatGw1" }
      }
    },

    "EIPAssociationEipNatGw2toNetworkInterfaceNatGw2" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Condition" : "DualNatGws",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "EipNatGw2", "AllocationId" ] },
        "NetworkInterfaceId" : { "Ref" : "NetworkInterfaceNatGw2" }
      }
    },

    "RouteTableNatGw1" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VpcId" },
        "Tags" : [ { "Key" : "Name",
                     "Value" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "RouteTableNatGw1" ] ] }
                     }
                 ]
        }
      },

    "RouteTableNatGw2" : {
      "Type" : "AWS::EC2::RouteTable",
      "Condition" : "DualNatGws",
      "Properties" : {
        "VpcId" : { "Ref" : "VpcId" },
        "Tags" : [ { "Key" : "Name",
                     "Value" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "RouteTableNatGw2" ] ] }
                     }
                 ]
        }
      },

    "RouteNatGw1" : { 
      "Type" : "AWS::EC2::Route",
      "Properties" : { 
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NetworkInterfaceId" : { "Ref" : "NetworkInterfaceNatGw1" },
        "RouteTableId" : { "Ref" : "RouteTableNatGw1" }
      }
    },

    "RouteNatGw2" : {
      "Type" : "AWS::EC2::Route",
      "Condition" : "DualNatGws",
      "Properties" : {
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NetworkInterfaceId" : { "Ref" : "NetworkInterfaceNatGw2" },
        "RouteTableId" : { "Ref" : "RouteTableNatGw2" }
      }
    },

    "SubnetRouteTableAssociationRouteTableNatGw1toSubnetNat1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTableNatGw1" },
        "SubnetId" : { "Fn::Select" : [ "0" , { "Ref" : "NatSubnetIds" } ] }
      }
    },

    "SubnetRouteTableAssociationRouteTableNatGw1toSubnetNat2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Fn::If" : [ "DualNatGws",
                                        { "Ref" : "RouteTableNatGw2" },
                                        { "Ref" : "RouteTableNatGw1" }
                                      ] }, 
        "SubnetId" : { "Fn::Select" : [ "1" , { "Ref" : "NatSubnetIds" } ] }
      }
    },

    "RoleNatGw" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : { 
        "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [ {
                "Action": "sts:AssumeRole",
                "Principal": { "Service": "ec2.amazonaws.com" },
                "Effect": "Allow",
                "Sid": ""
              } ]
        },
        "Policies": [ {
          "PolicyName" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "AttachNetworkInterface" ] ] },
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [ {
              "Effect": "Allow",
              "Action": [ "ec2:AttachNetworkInterface", 
                          "cloudwatch:PutMetricData",
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
              "Resource": "*"
            } ] 
          }
        } ]
      }
    },

    "InstanceProfileNatGw" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [ { "Ref" : "RoleNatGw" } ]
      }
    },

    "LaunchConfigurationNatGw1" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "NatGwConfig" : [ "install_cfn", "NetworkInterfaceConfig", "CloudWatch" ],
            "Update" : [ "CloudWatch" ]
          },
          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfigurationNatGw1.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource LaunchConfigurationNatGw1 ",
                          "         --configsets Update ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},          
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          },
          "NetworkInterfaceConfig" : {
            "commands" : {
              "10_AttachNetworkInterface" : {
                "command" : { "Fn::Join" : ["", [ "/usr/bin/aws ec2 attach-network-interface --region ", { "Ref" : "AWS::Region" },
                                                    " --network-interface-id ", { "Ref" : "NetworkInterfaceNatGw1" },
                                                    " --instance-id $(curl -s http://169.254.169.254/latest/meta-data/instance-id)",
                                                    " --device-index 1\n",
                                                    "logger \"attached network-interface ", { "Ref" : "NetworkInterfaceNatGw1" }, "\""
                                                    ] ] }
                },
              "20_DisableEth0" : {
                "command" :  "sleep 20 ; ifdown eth0" 
              },
              "30_ConfigureMasqueradeAndForwarding" : {
                "command" : "iptables -t nat -A POSTROUTING -j MASQUERADE ; iptables -A FORWARD -j ACCEPT ; echo 1 > /proc/sys/net/ipv4/ip_forward" 
              },
              "40_ReconfigNTPforEth1" : {
                "command" : "sed -i 's/eth0/eth1/' /etc/ntp.conf ; service ntpd restart"
              }
            }
          },
          "CloudWatch" : {
            "files" : {
              "/usr/local/bin/cloudwatch_nat_stats.sh" : {
                "content" : { "Fn::Join": [ "", [
                  "#!/bin/bash\n",
                  "CONNECTIONS=$(</proc/net/ip_conntrack)\n",
                  "TOTAL=$(echo \"$CONNECTIONS\" | wc -l)\n",
                  "TCP=$(echo \"$CONNECTIONS\" | grep \"^tcp\" | wc -l)\n",
                  "UDP=$(echo \"$CONNECTIONS\" | grep \"^udp\" | wc -l)\n",
                  "aws cloudwatch put-metric-data --region \"", { "Ref" : "AWS::Region" } ,"\" --namespace \"NAT\" --dimensions \"InstanceId\"=$(</tmp/InstanceId) --metric-name \"TotalConnections\" --value $TOTAL\n",
                  "aws cloudwatch put-metric-data --region \"", { "Ref" : "AWS::Region" } ,"\" --namespace \"NAT\" --dimensions \"InstanceId\"=$(</tmp/InstanceId) --metric-name \"TcpConnections\" --value $TCP\n",
                  "aws cloudwatch put-metric-data --region \"", { "Ref" : "AWS::Region" } ,"\" --namespace \"NAT\" --dimensions \"InstanceId\"=$(</tmp/InstanceId) --metric-name \"UdpConnections\" --value $UDP"
                ]]},
                "mode"  : "000500",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cron.d/cloudwatch_nat_stats" : {
                "content" : "* * * * * root /usr/local/bin/cloudwatch_nat_stats.sh\n",
                "mode"  : "000444",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/CloudWatchLogAgent.conf" : {
                "content" : { "Fn::Join": [ "", [
                  "[general]\n",
                  "state_file = /var/awslogs/state/agent-state\n",
                  "[/var/log/messages]\n",
                  "log_group_name = ", { "Ref" : "LogGroupName" }, "\n", 
                  "log_stream_name = {instance_id}\n",
                  "file = /var/log/messages\n"
                ]]},
                "mode" : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "10_GetInstanceId" : { 
                "command" : "curl -s http://169.254.169.254/latest/meta-data/instance-id > /tmp/InstanceId"
              },
              "20_InstallCloudWatchLogAgent" : {
                "command" : { "Fn::Join": [ "", [
                              "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",
                              "python awslogs-agent-setup.py -n -r ", { "Ref" : "AWS::Region" }, " -c /etc/CloudWatchLogAgent.conf"
                            ] ] }
              }
            }
          }
        }
      },
      "Properties" : {
        "IamInstanceProfile" : { "Ref" : "InstanceProfileNatGw" },
        "ImageId" : { "Fn::FindInMap" : [ "NatGwImageId" , { "Ref" : "AWS::Region" }, "ImageId" ] }, 
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName" : { "Fn::If" : [ "UseSSHKey" , { "Ref" : "KeyName" }, {"Ref" : "AWS::NoValue"} ] }, 
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                        "#!/bin/bash -xe\n",
                        "yum update -y aws-cfn-bootstrap\n",
                        "/opt/aws/bin/cfn-init -v ",
                        "         --stack ", { "Ref" : "AWS::StackName" },
                        "         --resource LaunchConfigurationNatGw1 ",
                        "         --configsets NatGwConfig ",
                        "         --region ", { "Ref" : "AWS::Region" } 
                      ]]}}
        }
      },

   "LaunchConfigurationNatGw2" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "NatGwConfig" : [ "install_cfn", "NetworkInterfaceConfig", "CloudWatch" ],
            "Update" : [ "CloudWatch" ]
          },
          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": [ "", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfigurationNatGw2.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource LaunchConfigurationNatGw2 ",
                          "         --configsets Update ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          },
          "NetworkInterfaceConfig" : {
            "commands" : {
              "10_AttachNetworkInterface" : {
                "command" : { "Fn::Join" : ["", [ "/usr/bin/aws ec2 attach-network-interface --region ", { "Ref" : "AWS::Region" },
                                                    " --network-interface-id ", { "Ref" : "NetworkInterfaceNatGw2" },
                                                    " --instance-id $(curl -s http://169.254.169.254/latest/meta-data/instance-id)",
                                                    " --device-index 1"
                                                    ] ] }
                },
              "20_DisableEth0" : {
                "command" :  "sleep 20 ; ifdown eth0"
              },
              "30_ConfigureMasqueradeAndForwarding" : {
                "command" : "iptables -t nat -A POSTROUTING -j MASQUERADE ; iptables -A FORWARD -j ACCEPT ; echo 1 > /proc/sys/net/ipv4/ip_forward"
              }
            }
          },
          "CloudWatch" : {
            "files" : {
              "/usr/local/bin/cloudwatch_nat_stats.sh" : {
                "content" : { "Fn::Join": [ "", [
                  "#!/bin/bash\n",
                  "CONNECTIONS=$(</proc/net/ip_conntrack)\n",
                  "TOTAL=$(echo \"$CONNECTIONS\" | wc -l)\n",
                  "TCP=$(echo \"$CONNECTIONS\" | grep \"^tcp\" | wc -l)\n",
                  "UDP=$(echo \"$CONNECTIONS\" | grep \"^udp\" | wc -l)\n",
                  "aws cloudwatch put-metric-data --region \"", { "Ref" : "AWS::Region" } ,"\" --namespace \"NAT\" --dimensions \"InstanceId\"=$(</tmp/InstanceId) --metric-name \"TotalConnections\" --value $TOTAL\n",
                  "aws cloudwatch put-metric-data --region \"", { "Ref" : "AWS::Region" } ,"\" --namespace \"NAT\" --dimensions \"InstanceId\"=$(</tmp/InstanceId) --metric-name \"TcpConnections\" --value $TCP\n",
                  "aws cloudwatch put-metric-data --region \"", { "Ref" : "AWS::Region" } ,"\" --namespace \"NAT\" --dimensions \"InstanceId\"=$(</tmp/InstanceId) --metric-name \"UdpConnections\" --value $UDP"
                ]]},
                "mode"  : "000500",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cron.d/cloudwatch_nat_stats" : {
                "content" : "* * * * * root /usr/local/bin/cloudwatch_nat_stats.sh\n",
                "mode"  : "000444",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "10_GetInstanceId" : {
                "command" : "curl -s http://169.254.169.254/latest/meta-data/instance-id > /tmp/InstanceId"
              }
            }
          }
        }
      },
      "Condition" : "DualNatGws",
      "Properties" : {
        "IamInstanceProfile" : { "Ref" : "InstanceProfileNatGw" },
        "ImageId" : { "Fn::FindInMap" : [ "NatGwImageId" , { "Ref" : "AWS::Region" }, "ImageId" ] },
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName" : { "Fn::If" : [ "UseSSHKey" , { "Ref" : "KeyName" }, {"Ref" : "AWS::NoValue"} ] },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                        "#!/bin/bash -xe\n",
                        "yum update -y aws-cfn-bootstrap\n",
                        "/opt/aws/bin/cfn-init -v ",
                        "         --stack ", { "Ref" : "AWS::StackName" },
                        "         --resource LaunchConfigurationNatGw2 ",
                        "         --configsets NatGwConfig ",
                        "         --region ", { "Ref" : "AWS::Region" }
                      ]]}}

        }
      },

    
    "AutoScalingGroupNatGw1" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref" : "LaunchConfigurationNatGw1" },
        "MaxSize" : "1",
        "MinSize" : "1",
        "VPCZoneIdentifier" :  [ { "Fn::Select" : [ "0" , { "Ref" : "PublicSubnetIds" } ] } ],
        "Tags" : [ { "Key" : "Name",
                     "Value" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "NatGw1" ] ] },
                     "PropagateAtLaunch" : "true"
                   }
                 ]
        },
        "DependsOn" : "NetworkInterfaceNatGw1"
      },

    "AutoScalingGroupNatGw2" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Condition" : "DualNatGws",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref" : "LaunchConfigurationNatGw2" },
        "MaxSize" : "1",
        "MinSize" : "1",
        "VPCZoneIdentifier" :  [ { "Fn::Select" : [ "1" , { "Ref" : "PublicSubnetIds" } ] } ],
        "Tags" : [ { "Key" : "Name",
                     "Value" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "NatGw2" ] ] },
                     "PropagateAtLaunch" : "true"
                   }
                 ]
        },
        "DependsOn" : "NetworkInterfaceNatGw2"
      }
  }
}
