{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Creates VPC and related networking componets to support Multi-AZ apps",

  "Parameters" : {
    "Prefix" : {
      "Default" : "",
      "Description" : "The prefix for the names of all created resources. If one is not specified then one will not be used.",
      "Type" : "String",
      "MaxLength" : "64"
    },

    "VpcIpPrefix" : {
      "Default" : "10.0",
      "Description" : "The first two octets, without the trailing dot, that will be used as the IP Prefix for the subnets created in the VPC.",
      "Type" : "String",
      "MinLength" : "3",
      "MaxLength" : "7",
      "AllowedPattern" : "[0-9]{1,3}\\.[0-9]{1,3}",
      "ConstraintDescription" : "Must be the first two octets of an IP address."
    },

    "TemplateBucket" : {
      "Description" : "Name of the S3 bucket that contains the templates for the nested stacks",
      "Type" : "String"
    },

    "NatStrategy" : {
      "Default" : "single",
      "Description" : "Determines if a single NatGW will be used for both private subnets or each private subnet will het it's own NatGW using dual NatGws. Additionally none can be specifiec and the NatGws and related subnets will not be created.",
      "Type" : "String",
      "AllowedValues" : [ "none","single","dual" ],
      "ConstraintDescription" : "Must be either single, for 1 NatGw, or dual, for 2 NatGws."
    },

    "KeyName" : { 
      "Default" : "",
      "Description" : "Name of an SSH keypair which will be used for network related instances, such as NatGws and VpnGws. If one is not specified than the instances will be launched without one (i.e. No SSH access).",
      "Type" : "String",
      "MaxLength" : "255"
    }     
  },

  "Mappings" : {
    "subnetting" : {
        "VPC" :         { "subnet" : "0.0/16" },
        "Public1" :     { "subnet" : "0.0/24" },
        "Public2" :     { "subnet" : "1.0/24" },
        "Nat1" :        { "subnet" : "100.0/24" },
        "Nat2" :        { "subnet" : "101.0/24" },
        "Private1" :    { "subnet" : "200.0/24" },
        "Private2" :    { "subnet" : "201.0/24" }
    }
  },

  "Conditions" : {
    "DeployNat" : { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "NatStrategy" }, "none" ] } ] }
  },  

  "Resources" : { 
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::Join" : [ ".", [ { "Ref" : "VpcIpPrefix" } , { "Fn::FindInMap" : [ "subnetting", "VPC", "subnet" ] } ] ]  },
        "EnableDnsHostnames" : true,
        "Tags" : [ { "Key" : "Name", 
                     "Value" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "VPC" ] ] }
                   } 
                 ]
      }
    },
  
    "SubnetPublic1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "CidrBlock" : { "Fn::Join" : [ ".", [ { "Ref" : "VpcIpPrefix" } , { "Fn::FindInMap" : [ "subnetting", "Public1", "subnet" ] } ] ]  },
        "MapPublicIpOnLaunch" : true,
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [ { "Key" : "Name",
                     "Value" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "SubnetPublic1" ] ] }
                   }
                 ]
      }
    },

    "SubnetPublic2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] },
        "CidrBlock" :  { "Fn::Join" : [ ".", [ { "Ref" : "VpcIpPrefix" } , { "Fn::FindInMap" : [ "subnetting", "Public2", "subnet" ] } ] ]  },
        "MapPublicIpOnLaunch" : true,
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [ { "Key" : "Name",
                     "Value" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "SubnetPublic2" ] ] }
                   }
                 ]
      }
    },

    "SubnetNat1" : {
      "Type" : "AWS::EC2::Subnet",
      "Condition" : "DeployNat",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "CidrBlock" :  { "Fn::Join" : [ ".", [ { "Ref" : "VpcIpPrefix" } , { "Fn::FindInMap" : [ "subnetting", "Nat1", "subnet" ] } ] ]  },
        "MapPublicIpOnLaunch" : false,
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [ { "Key" : "Name",
                     "Value" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "SubnetNat1" ] ] }
                   }
                 ]
      }
    },

    "SubnetNat2" : {
      "Type" : "AWS::EC2::Subnet",
      "Condition" : "DeployNat",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] },
        "CidrBlock" :  { "Fn::Join" : [ ".", [ { "Ref" : "VpcIpPrefix" } , { "Fn::FindInMap" : [ "subnetting", "Nat2", "subnet" ] } ] ]  },
        "MapPublicIpOnLaunch" : false,
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [ { "Key" : "Name",
                     "Value" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "SubnetNat2" ] ] }
                   }
                 ]
      }
    },

    "SubnetPrivate1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "CidrBlock" :  { "Fn::Join" : [ ".", [ { "Ref" : "VpcIpPrefix" } , { "Fn::FindInMap" : [ "subnetting", "Private1", "subnet" ] } ] ]  },
        "MapPublicIpOnLaunch" : false,
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [ { "Key" : "Name",
                     "Value" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "SubnetPrivate1" ] ] }
                   }
                 ]
      }
    },

    "SubnetPrivate2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] },
        "CidrBlock" :  { "Fn::Join" : [ ".", [ { "Ref" : "VpcIpPrefix" } , { "Fn::FindInMap" : [ "subnetting", "Private2", "subnet" ] } ] ]  },
        "MapPublicIpOnLaunch" : false,
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [ { "Key" : "Name",
                     "Value" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "SubnetPrivate2" ] ] }
                   }
                 ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ { "Key" : "Name",
                     "Value" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "InternetGateway" ] ] }
                   }
                 ]
      }
    },

    "VPCGatewayAttachmentInternetGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "InternetGatewayId" : { "Ref" : "InternetGateway" },
        "VpcId" : { "Ref" : "VPC" }
      }
    },

    "RouteTableInternetGateway" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [ { "Key" : "Name",
                     "Value" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "RouteTableInternetGateway" ] ] }
                   }
                 ]
      }
    },

    "RouteDefaultToInternetGateway" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" },
        "RouteTableId" : { "Ref" : "RouteTableInternetGateway" }
      }
    },

    "SubnetRouteTableAssociationRouteTableInternetGatewayToSubnetPublic1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTableInternetGateway" },
        "SubnetId" : { "Ref" : "SubnetPublic1" }
      }
    },

    "SubnetRouteTableAssociationRouteTableInternetGatewayToSubnetPublic2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTableInternetGateway" },
        "SubnetId" : { "Ref" : "SubnetPublic2" }
      }
    },

    "RouteTablePrivate" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [ { "Key" : "Name",
                     "Value" : { "Fn::Join" : [ "", [ { "Ref" : "Prefix" }, "RouteTablePrivate" ] ] }
                   }
                 ]
      }
    },

    "SubnetRouteTableAssociationRouteTablePrivateToSubnetPrivate1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTablePrivate" },
        "SubnetId" : { "Ref" : "SubnetPrivate1" }
      }
    },

    "SubnetRouteTableAssociationRouteTablePrivateToSubnetPrivate2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTablePrivate" },
        "SubnetId" : { "Ref" : "SubnetPrivate2" }
      }
    },

    "StackSecurityGroups" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "Parameters" : { "Prefix" : { "Ref" : "Prefix" },
                         "VpcId" : { "Ref" : "VPC" }
                       },
        "TemplateURL" : { "Fn::Join" : [ "", [
                                        "https://s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com/",
                                        { "Ref" : "TemplateBucket" }, "/security-groups.json"
                                       ] ] },
        "TimeoutInMinutes" : "2"
      }
    },

    "StackNetworkCloudWatch" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "TemplateURL" : { "Fn::Join" : [ "", [
                                        "https://s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com/",
                                        { "Ref" : "TemplateBucket" }, "/network-cloudwatch.json"
                                       ] ] },
        "TimeoutInMinutes" : "2"
      }
    },

    "StackNatGw" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Condition" : "DeployNat",
      "Properties" : {
        "Parameters" : { "Prefix" : { "Ref" : "Prefix" },
                         "VpcId" : { "Ref" : "VPC" },
                         "PublicSubnetIds" : { "Fn::Join" : [ ",",
                                                        [ { "Ref" : "SubnetPublic1" },
                                                        { "Ref" : "SubnetPublic2" } ]
                                                        ] },
                         "NatSubnetIds" : { "Fn::Join" : [ ",", 
                                                        [ { "Ref" : "SubnetNat1" }, 
                                                        { "Ref" : "SubnetNat2" } ] 
                                                        ] },
                         "NatStrategy" : { "Ref" : "NatStrategy" },
                         "KeyName" : { "Ref": "KeyName" },
                         "LogGroupName" : { "Fn::GetAtt" : [ "StackNetworkCloudWatch", "Outputs.LogGroupName" ] }
                       },
        "TemplateURL" : { "Fn::Join" : [ "", [
                                        "https://s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com/",
                                        { "Ref" : "TemplateBucket" }, "/nat.json"
                                       ] ] },
        "TimeoutInMinutes" : "2"
      }
    }
  },

  "Outputs" : {
    "Prefix" : {
      "Value" : { "Ref" : "Prefix" },
      "Description" : "Naming Prefix"
    }
  }
}

        
